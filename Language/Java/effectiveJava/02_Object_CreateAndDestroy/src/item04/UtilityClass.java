package item04;
/*
 * 정적 메소드와 정적 필드만을 담은 클래스를 만들 때
 * 기본타입 값이나 배열 관련 메소드를 모아놓거나
 * 특정 인터페이스를 구현하는 객체를 생성해주는 정적 메소드(혹은 팩토리)
 * final 클래스와 관련한 메소드를 모아놓기
 */
public class UtilityClass {
	//기본 생성자가 명시되지 않으면 만들어지므로 이를 막는다(인스턴스화 방지용)
	private UtilityClass() {
		throw new AssertionError();
	}
	//모든 생성자는 명시적이든 묵시적이든 상위 클래스의 생성자를 호출하게 되는데 이를 private으로 선언했으니 하위클래스가
	//상위 클래스의 생성자에 접근할 길이 막혀 상속을 불가능하게 하는 효과도 있음
}
